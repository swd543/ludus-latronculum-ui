{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","dragStartHandler","d","e","dataTransfer","setData","JSON","stringify","countPieces","counts","state","board","forEach","r","defaultState","setState","dragOverHandler","preventDefault","dropHandler","i","j","data","parse","getData","c","dropHandlerRetired","retired","push","dimensions","ulrich","rows","columns","lineup","kowalski","dux","x","initalizeBoard","name","dim","Array","fill","undefined","k","getRetired","dimensionString","className","onDrop","this","style","padding","onClick","Object","entries","filter","v","map","key","length","minHeight","display","alignItems","margin","draggable","onDragStart","onDragOver","border","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.91b86d0d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nexport default class App extends React.Component {\n\n  constructor() {\n    super()\n    const dimensions = { ulrich: { rows: 8, columns: 8, lineup: 2 }, kowalski: { rows: 8, columns: 12, lineup: 1, dux: { x: 3 } } }\n    const defaultState = undefined\n\n    this.initalizeBoard = (name) => {\n      name = name || 'ulrich'\n      const dim = dimensions[name]\n      const board = []\n\n      for (var i = 0; i < dimensions[name].lineup; i++) {\n        board.push(new Array(dim.columns).fill('black'))\n      }\n      for (var j = 0; j < dim.rows - 2 * dimensions[name].lineup; j++) {\n        board.push(new Array(dim.columns).fill(defaultState))\n      }\n      for (var k = 0; k < dimensions[name].lineup; k++) {\n        board.push(new Array(dim.columns).fill('white'))\n      }\n\n      dim.dux && (board[dim.lineup][dim.dux.x] = 'dux ' + board[1][1])\n      dim.dux && (board[dim.rows - dim.lineup - 1][dim.columns - dim.dux.x - 1] = 'dux ' + board[1][1])\n      this.setState({ name, retired: this.getRetired() })\n      return board;\n    }\n    this.getRetired = () => []\n    this.state = { board: this.initalizeBoard(), dimensions, retired: this.getRetired() }\n    this.dimensionString = dimensions.rows + 'x' + dimensions.columns\n  }\n\n  // Drag handler\n  dragStartHandler = (d) => (e) => {\n    e.dataTransfer.setData(\"dragData\", JSON.stringify(d))\n    // console.log(d, e);\n  }\n\n  // Count black and white pieces\n  countPieces = () => {\n    var counts = {}\n    this.state.board.forEach(r => r.forEach(d => counts[d] === this.defaultState ? counts[d] = 0 : counts[d]++))\n    this.setState({ counts: counts })\n  }\n\n  // Handler for dragOver\n  dragOverHandler = (d) => (e) => {\n    e.preventDefault()\n  }\n\n  // Handler for drop event\n  dropHandler = (d) => (e) => {\n    const { i, j } = d\n    const { board } = this.state\n    const data = JSON.parse(e.dataTransfer.getData(\"dragData\"))\n    board[data.i][data.j] = this.defaultState\n    board[i][j] = data.c\n    // console.log(d, e, i, j, board, data)\n    this.setState({ board: board }, this.countPieces)\n  }\n\n  dropHandlerRetired = (e) => {\n    const { retired, board } = this.state\n    const data = JSON.parse(e.dataTransfer.getData(\"dragData\"))\n    board[data.i][data.j] = this.defaultState\n    retired.push(data.c)\n    this.setState({ board: board, retired: retired }, this.countPieces)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Drawer\" onDrop={this.dropHandler({})}>\n          <p style={{ padding: 5 }}>\n            Placeholder for game status\n          </p>\n          <button onClick={() => this.setState({ board: this.initalizeBoard() })}>\n            New game\n          </button>\n          <button onClick={() => this.setState({ board: this.initalizeBoard('ulrich') })}>\n            Ulrich\n          </button>\n          <button onClick={() => this.setState({ board: this.initalizeBoard('kowalski') })}>\n            Kowalski\n          </button>\n          {\n            this.state.counts && Object.entries(this.state.counts).filter(v => v[0] !== 'undefined').map((k, v) => <p key={v}>{k[0]} : {k[1]}</p>)\n          }\n          <p>\n            Board is {this.state.board && this.state.board.length}x{this.state.board && this.state.board[0].length}\n          </p>\n        </div>\n        <div className=\"Game\">\n          <div style={{ minHeight: 80, display: 'flex', alignItems: 'center' }}>\n            <h1 style={{ margin: 'auto' }}>\n              {this.state.name || 'ulrich'}\n            </h1>\n          </div>\n          <div style={{ margin: 'auto' }}>\n            <table>\n              <tbody>\n                {this.state.board.map((r, i) => <tr key={i}>\n                  {r.map((c, j) => <td key={j} className={c || ((i + j) % 2 === 0 ? 'odd' : 'even')} draggable={c !== undefined}\n                    onDragStart={this.dragStartHandler({ c, i, j })}\n                    onDragOver={this.dragOverHandler({})}\n                    onDrop={this.dropHandler({ c, i, j })} />\n                  )}\n                </tr>)}\n              </tbody>\n            </table>\n          </div>\n          <div style={{ border: '1px dashed green', minHeight: 80, display: 'flex' }} onDrop={this.dropHandlerRetired}\n            onDragOver={(e) => {\n              e.preventDefault()\n            }}>\n            {this.state.retired && this.state.retired.map((k, v) => <div key={v} className={k} style={{ padding: 40, margin: 4 }}></div>)}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}